#Project So Far

import random
import os
import time

class WanderingGame:
    def __init__(self, grid_size, num_players, obstacles):
        self.grid_size = grid_size
        self.num_players = num_players
        self.player_positions = {}
        self.destination_points = {}
        self.obstacles = set(obstacles) if obstacles else set()  # Store obstacle positions
        self.moves_history = {f"P {i + 1}": [] for i in range(num_players)}  # Track moves history

    def generate_positions(self):
        # Generate unique random positions for each player, destination point, and obstacle
        positions = []
        for _ in range(2 * self.num_players + len(self.obstacles)):  # Add space for obstacles
            while True:
                pos = [random.randint(0, self.grid_size - 1), random.randint(0, self.grid_size - 1)]
                if pos not in positions:
                    positions.append(pos)
                    break
        return positions

    def generate_obstacles(self):
        # Generate random positions for obstacles
        obstacles = []
        if self.obstacles:  # If obstacles are provided externally
            return list(self.obstacles)
        else:  # Generate obstacles randomly
            num_obstacles = len(self.player_positions) + len(self.obstacles)
            if self.grid_size >= 6:  # Increase number of obstacles for larger grid sizes
                num_obstacles += (self.grid_size // 2)
        
            for _ in range(num_obstacles):  
                while True:
                    pos = [random.randint(0, self.grid_size - 1), random.randint(0, self.grid_size - 1)]
                    if pos not in obstacles and pos not in self.player_positions.values():
                        obstacles.append(pos)
                        break
            return obstacles

    def initialize_game(self):
        # Initialize player positions, destination points, and obstacles
        positions = self.generate_positions()
        self.obstacles = self.generate_obstacles()
        obstacle_positions = self.obstacles
        positions = [pos for pos in positions if pos not in obstacle_positions]  # Exclude obstacle positions

        if len(positions) < self.num_players * 2:
            print("Not enough positions available for players and destination points.")
            return False

        for i in range(self.num_players):
            player_id = f"P {i + 1}"
            self.player_positions[player_id] = positions[i]
            self.destination_points[player_id] = positions[self.num_players + i]

        return True

    def move_player(self, player, direction):
        # Update player position based on movement
        start_time = time.time()
        if direction == 'up' and self.player_positions[player][0] > 0:
            new_pos = [self.player_positions[player][0] - 1, self.player_positions[player][1]]
        elif direction == 'down' and self.player_positions[player][0] < self.grid_size - 1:
            new_pos = [self.player_positions[player][0] + 1, self.player_positions[player][1]]
        elif direction == 'left' and self.player_positions[player][1] > 0:
            new_pos = [self.player_positions[player][0], self.player_positions[player][1] - 1]
        elif direction == 'right' and self.player_positions[player][1] < self.grid_size - 1:
            new_pos = [self.player_positions[player][0], self.player_positions[player][1] + 1]
        else:
            return  # Invalid move

        if new_pos in self.obstacles:
            print("Obstacle! You cannot move there.")
            return

        self.player_positions[player] = new_pos
        end_time = time.time()

        # Add move to moves history with duration
        move_duration = end_time - start_time
        self.moves_history[player].append((direction, move_duration))

    def check_win_condition(self, player):
        # Check if player has reached the destination point
        return self.player_positions[player] == self.destination_points[player]

    def display_grid(self):
        # Display grid with player positions, destination points, and obstacles
        os.system('cls' if os.name == 'nt' else 'clear')  # Clear the console
        end_point_displayed = False  # Flag to ensure only one end point is displayed
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                if [i, j] in self.player_positions.values():
                    for player, pos in self.player_positions.items():
                        if pos == [i, j]:
                            print(player, end=" ")  # Player position represented by player identifier
                elif [i, j] in self.destination_points.values() and not end_point_displayed:
                    for player, pos in self.destination_points.items():
                        if pos == [i, j]:
                            print("End", end=" ")  # Destination point represented by 'End'
                            end_point_displayed = True
                elif [i, j] in self.obstacles:
                    print("X", end=" ")  # Obstacle
                else:
                    print("--", end=" ")  # Empty cell
            print()  # Move to next row
        print()  # Add space after grid
    def review_moves_history(self, player):
        # Review moves history for a specific player
        print(f"P {player} moves history:")
        for idx, (move, duration) in enumerate(self.moves_history[player], 1):
            print(f"Move {idx}: {move} (Duration: {duration:.2f} seconds)")

def grade_game(grade, num_players, game_results):
    grid_size = 6 + grade * 2  # Increase grid size with grade level
    obstacles = None if grade >= 2 else []  # Initialize obstacles as None if grade is 3-5 or 6-8
    game = WanderingGame(grid_size, num_players, obstacles)
    initialized = game.initialize_game()

    if not initialized:
        return game_results  # Return without starting the game if initialization failed

    wins = {f"P {i + 1}": 0 for i in range(num_players)}
    losses = {f"P {i + 1}": 0 for i in range(num_players)}

    print("\nWelcome to Wandering in the Woods Game!")
    print("\nInstructions:")
    print("You are represented by numbers '1' to '{}'. Each player has their own destination point.".format(num_players))
    print("Move your player around the grid to reach your destination point.")
    print("Use the following commands for movement:")
    print("    'w' or 'up'    - Move up")
    print("    's' or 'down'  - Move down")
    print("    'a' or 'left'  - Move left")
    print("    'd' or 'right' - Move right")
    print("Objective: Reach your destination point.")
    input("Press Enter to start...")

    start_time = time.time()

    while True:
        for player in game.player_positions.keys():
            game.display_grid()
            direction = input(f"{player}: Enter direction (or 'q' to quit): ").lower()
            if direction == 'w' or direction == 'up':
                game.move_player(player, 'up')
            elif direction == 's' or direction == 'down':
                game.move_player(player, 'down')
            elif direction == 'a' or direction == 'left':
                game.move_player(player, 'left')
            elif direction == 'd' or direction == 'right':
                game.move_player(player, 'right')
            elif direction == 'q':  # Quit the game
                print("Thanks for playing!")
                game_results.append((wins, losses))
                end_time = time.time()
                print(f"Game Duration: {end_time - start_time:.2f} seconds")
                return game_results
            # Check if player reached destination
            if game.check_win_condition(player):
                print(f"{player} has reached their destination!")
                wins[player] += 1
                for other_player in game.player_positions.keys():
                    if other_player != player:
                        losses[other_player] += 1
                print("Wins:", wins)
                print("Losses:", losses)
                rematch = input("Do you want a rematch? (yes/no): ").lower()
                if rematch == 'yes' or rematch == 'y':
                    game_results.append((wins, losses))
                    wins = {f"P {i + 1}": 0 for i in range(num_players)}
                    losses = {f"P {i + 1}": 0 for i in range(num_players)}
                    game.initialize_game()
                    start_time = time.time()
                else:
                    game_results.append((wins, losses))
                    end_time = time.time()
                    print(f"Game Duration: {end_time - start_time:.2f} seconds")
                    return game_results

def main():
    print("Welcome to Wandering in the Woods Game!")
    print("Select your mode:")
    print("1. Single Player")
    print("2. Multiplayer")
    choice = int(input("Enter your choice (1-2): "))
    game_results = []

    if choice == 1:
        print("\nSelect your grade level:")
        print("1. K-2")
        print("2. 3-5")
        print("3. 6-8")
        grade = int(input("Enter your choice (1-3): "))
        num_players = 1
        if grade == 1:
            print("\nK-2 Version:")
            game_results = grade_game(1, num_players, game_results)
        elif grade == 2:
            print("\n3-5 Version:")
            game_results = grade_game(2, num_players, game_results)
        elif grade == 3:
            print("\n6-8 Version:")
            game_results = grade_game(3, num_players, game_results)
        else:
            print("Invalid choice. Please select either 1, 2, or 3.")
    elif choice == 2:
        print("\nMultiplayer Mode:")
        grade = int(input("Select your grade level 1. K-2, 2. 3-5, 3. 6-8: "))
        num_players = int(input("Enter the number of players (1-4): "))
        if num_players < 1 or num_players > 4:
            print("Invalid number of players. Please enter a number between 1 and 4.")
            return
        if grade < 1 or grade > 3:
            print("Invalid grade level. Please select a grade level between 1 and 3.")
            return
        print("\nStarting the game...")
        game_results = grade_game(grade, num_players, game_results)
    else:
        print("Invalid choice. Please select either 1 or 2.")

    # Display game results
    print("Game Results:")
    for idx, (wins, losses) in enumerate(game_results, 1):
        print(f"Game {idx}:")
        print("Wins:", wins)
        print("Losses:", losses)

if __name__ == "__main__":
    main()
